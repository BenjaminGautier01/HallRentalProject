@page "/customers"
@inject CustomerService CustomerService
@using HallRentalModels.Dtos
@using HallRentalProject.Services
@using Microsoft.AspNetCore.Components;

<h3>Customer Management</h3>

@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Customer ID</th>
                <th>Name</th>
                <!-- Add other customer properties here -->
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var customer in customers)
        {
            <tr>
                <td>@customer.CustomerID</td>
                <td>@customer.Name</td>
                <!-- Display other customer properties here -->
                <td>
                    <button @onclick="() => EditCustomer(customer)">Edit</button>
                    <button @onclick="() => DeleteCustomer(customer.CustomerID)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <button @onclick="AddCustomer">Add New Customer</button>
    @if (showEditForm)
    {
        <EditCustomerForm Customer="editingCustomer" OnSave="HandleSave" />
    }
}

@code {
    private IEnumerable<CustomerDto> customers; // Made nullable
    private CustomerDto editingCustomer = new CustomerDto();
    private bool showEditForm = false;

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetAllCustomersAsync();
    }

    private void AddCustomer()
    {
        editingCustomer = new CustomerDto();
        showEditForm = true;
    }

    private void EditCustomer(CustomerDto customer)
    {
        editingCustomer = customer;
        showEditForm = true;
    }

    private async Task DeleteCustomer(int customerId)
    {
        await CustomerService.DeleteCustomerAsync(customerId);
        customers = await CustomerService.GetAllCustomersAsync(); // Refresh the list
    }

    private async Task HandleSave()
    {
        if (editingCustomer.CustomerID == 0)
        {
            await CustomerService.CreateCustomerAsync(editingCustomer);
        }
        else
        {
            await CustomerService.UpdateCustomerAsync(editingCustomer.CustomerID, editingCustomer);
        }

        customers = await CustomerService.GetAllCustomersAsync(); // Refresh the list
        showEditForm = false;
    }
}
